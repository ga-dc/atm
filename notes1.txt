
Accounts:
 both add inputs when deposit button is clicked.
 both subtract inputs when withdrawl is clicked.
 both turn red when input = zero
 both cannot go into the negative. (ignore default?)
 both

 function person(first, last, age, eyecolor) {
     this.firstName = first;
     this.lastName = last;
     this.age = age;
     this.eyeColor = eyecolor;
 }
 person.prototype.nationality = "English";
 }
 person.prototype.name = function() {
     return this.firstName + " " + this.lastName;
 };





###User Stories
- As a user, I want to deposit money into one of the bank accounts

// ** userinput into each account. Add to total.
//** userinput into each account - subracts from each account.

- As a user, I want to withdraw money from one of the bank accounts

  - Make sure the balance in an account can't go negative. If a user tries to withdraw more money than exists in the account, ignore the transaction.
- As a user, I want overdraft protection
  - What happens when the user wants to withdraw more money from the checking account than is in the account?
  - If a withdrawal can be covered by the balances in both accounts, take the balance of the account withdrawn from down to $0 and take the rest of the withdrawal from the other account.
  - If the withdrawal amount is more than the combined account balance, ignore it.
- As a user, I want the color of my back account to reflect it's balance (there's a CSS class called .zero already written for this!)
- Are there ways to refactor your code to make it DRYer or more Object-Oriented?

// var checkingBalance = document.querySelector("div#checking_balance");
// checkingBalance = parseInt( checkingBalance.innerHTML.replace("$", "") );
//
// var checkingDeposit = function(amount){
//   checkingBalance = parseInt( checkingBalance.innerHTML.replace("$", "") );
// }
// function checkingWithdrawal(amount){
// }
// function savingsDeposit(amount){
// }
// function savingsWithdrawal(amount){
// }
// // an eventListerner for each button, each one a "click"
